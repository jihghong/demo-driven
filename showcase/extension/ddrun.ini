# Example ddrun.ini

# Available tokens:
#      {path} = script path
#    {python} = path to Python executable

# demo-driven built-in for Python script
py = {python} {path}

# demo-driven built-in for Jupyter Notebook
ipynb = {python} -m demo_driven.ddnb {path}

# Shell script on Unix
sh = bash {path}

# On Windows paths, you can use any of the following:
# - double quotes with double backslashes (e.g., "C:\\msys64\\usr\\bin\\bash.exe")
# - single quotes with single backslashes (e.g., 'C:\cygwin64\bin\bash.exe')
# - or either quotes with forward slashes (e.g., "C:/Program Files/Git/bin/bash.exe")

# Shell script on Windows using MSYS bash
sh = "C:\\msys64\\usr\\bin\\bash.exe" {path}

# Shell script on Windows using Cygwin bash
sh = 'C:\cygwin64\bin\bash.exe' {path}

# Shell script on Windows using Git bash
sh = "C:/Program Files/Git/bin/bash.exe" {path}

# Windows batch script
bat = cmd /c {path}

# PowerShell script using built-in Windows PowerShell
ps1 = powershell -ExecutionPolicy Bypass -File {path}

# PowerShell script using cross-platform PowerShell core
ps1 = pwsh {path}

# Windows executable binary
exe = {path}

# Python source file to be AST dumped
ast = {python} -m ast {path}

# Python source file to be disassembled
dis = {python} -m dis {path}

# text file to be tokenized
tok = {python} -m tokenize {path}

# JSON file to be syntax-checked and pretty-printed
json = {python} -m json.tool {path}

# YAML file to be parsed and pretty-printed
yaml = {python} -c "import sys, yaml, pprint; pprint.pprint(yaml.safe_load(open(sys.argv[1])))" {path}

# TOML file to be parsed and pretty-printed
toml = {python} -c "import sys, tomllib, pprint; pprint.pprint(tomllib.load(open(sys.argv[1], 'rb')))" {path}

# CSV file to be shown as lists of values per row
csv = {python} -c "import csv, sys; reader = csv.reader(open(sys.argv[1])); [print(row) for row in reader]" {path}